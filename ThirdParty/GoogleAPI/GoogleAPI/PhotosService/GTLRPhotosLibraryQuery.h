// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Photos Library API (photoslibrary/v1)
// Description:
//   Manage photos, videos, and albums in Google Photos
// Documentation:
//   https://developers.google.com/photos/

#if __has_include(<GoogleAPIClientForREST/GTLRQuery.h>) || GTLR_BUILT_AS_FRAMEWORK
  #import <GoogleAPIClientForREST/GTLRQuery.h>
#elif SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRPhotosLibraryObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Photos Library query classes.
 */
@interface GTLRPhotosLibraryQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Adds an enrichment at a specified position in a defined album.
 *
 *  Method: photoslibrary.albums.addEnrichment
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryAppendonly
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_AlbumsAddEnrichment : GTLRPhotosLibraryQuery

/** Required. Identifier of the album where the enrichment is to be added. */
@property(nonatomic, copy, nullable) NSString *albumId;

/**
 *  Fetches a @c GTLRPhotosLibrary_AddEnrichmentToAlbumResponse.
 *
 *  Adds an enrichment at a specified position in a defined album.
 *
 *  @param object The @c GTLRPhotosLibrary_AddEnrichmentToAlbumRequest to
 *    include in the query.
 *  @param albumId Required. Identifier of the album where the enrichment is to
 *    be added.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsAddEnrichment
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_AddEnrichmentToAlbumRequest *)object
                        albumId:(NSString *)albumId;

@end

/**
 *  Adds one or more media items in a user's Google Photos library to an album.
 *  The media items and albums must have been created by the developer via the
 *  API. Media items are added to the end of the album. If multiple media items
 *  are given, they are added in the order specified in this call. Each album
 *  can contain up to 20,000 media items. Only media items that are in the
 *  user's library can be added to an album. For albums that are shared, the
 *  album must either be owned by the user or the user must have joined the
 *  album as a collaborator. Partial success is not supported. The entire
 *  request will fail if an invalid media item or album is specified.
 *
 *  Method: photoslibrary.albums.batchAddMediaItems
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryAppendonly
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_AlbumsBatchAddMediaItems : GTLRPhotosLibraryQuery

/** Required. Identifier of the Album that the media items are added to. */
@property(nonatomic, copy, nullable) NSString *albumId;

/**
 *  Fetches a @c GTLRPhotosLibrary_BatchAddMediaItemsToAlbumResponse.
 *
 *  Adds one or more media items in a user's Google Photos library to an album.
 *  The media items and albums must have been created by the developer via the
 *  API. Media items are added to the end of the album. If multiple media items
 *  are given, they are added in the order specified in this call. Each album
 *  can contain up to 20,000 media items. Only media items that are in the
 *  user's library can be added to an album. For albums that are shared, the
 *  album must either be owned by the user or the user must have joined the
 *  album as a collaborator. Partial success is not supported. The entire
 *  request will fail if an invalid media item or album is specified.
 *
 *  @param object The @c GTLRPhotosLibrary_BatchAddMediaItemsToAlbumRequest to
 *    include in the query.
 *  @param albumId Required. Identifier of the Album that the media items are
 *    added to.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsBatchAddMediaItems
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_BatchAddMediaItemsToAlbumRequest *)object
                        albumId:(NSString *)albumId;

@end

/**
 *  Removes one or more media items from a specified album. The media items and
 *  the album must have been created by the developer via the API. For albums
 *  that are shared, this action is only supported for media items that were
 *  added to the album by this user, or for all media items if the album was
 *  created by this user. Partial success is not supported. The entire request
 *  will fail and no action will be performed on the album if an invalid media
 *  item or album is specified.
 *
 *  Method: photoslibrary.albums.batchRemoveMediaItems
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 */
@interface GTLRPhotosLibraryQuery_AlbumsBatchRemoveMediaItems : GTLRPhotosLibraryQuery

/**
 *  Required. Identifier of the Album that the media items are to be removed
 *  from.
 */
@property(nonatomic, copy, nullable) NSString *albumId;

/**
 *  Fetches a @c GTLRPhotosLibrary_BatchRemoveMediaItemsFromAlbumResponse.
 *
 *  Removes one or more media items from a specified album. The media items and
 *  the album must have been created by the developer via the API. For albums
 *  that are shared, this action is only supported for media items that were
 *  added to the album by this user, or for all media items if the album was
 *  created by this user. Partial success is not supported. The entire request
 *  will fail and no action will be performed on the album if an invalid media
 *  item or album is specified.
 *
 *  @param object The @c GTLRPhotosLibrary_BatchRemoveMediaItemsFromAlbumRequest
 *    to include in the query.
 *  @param albumId Required. Identifier of the Album that the media items are to
 *    be removed from.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsBatchRemoveMediaItems
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_BatchRemoveMediaItemsFromAlbumRequest *)object
                        albumId:(NSString *)albumId;

@end

/**
 *  Creates an album in a user's Google Photos library.
 *
 *  Method: photoslibrary.albums.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryAppendonly
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_AlbumsCreate : GTLRPhotosLibraryQuery

/**
 *  Fetches a @c GTLRPhotosLibrary_Album.
 *
 *  Creates an album in a user's Google Photos library.
 *
 *  @param object The @c GTLRPhotosLibrary_CreateAlbumRequest to include in the
 *    query.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsCreate
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_CreateAlbumRequest *)object;

@end

/**
 *  Returns the album based on the specified `albumId`. The `albumId` must be
 *  the ID of an album owned by the user or a shared album that the user has
 *  joined.
 *
 *  Method: photoslibrary.albums.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_AlbumsGet : GTLRPhotosLibraryQuery

/** Required. Identifier of the album to be requested. */
@property(nonatomic, copy, nullable) NSString *albumId;

/**
 *  Fetches a @c GTLRPhotosLibrary_Album.
 *
 *  Returns the album based on the specified `albumId`. The `albumId` must be
 *  the ID of an album owned by the user or a shared album that the user has
 *  joined.
 *
 *  @param albumId Required. Identifier of the album to be requested.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsGet
 */
+ (instancetype)queryWithAlbumId:(NSString *)albumId;

@end

/**
 *  Lists all albums shown to a user in the Albums tab of the Google Photos app.
 *
 *  Method: photoslibrary.albums.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_AlbumsList : GTLRPhotosLibraryQuery

/**
 *  If set, the results exclude media items that were not created by this app.
 *  Defaults to false (all albums are returned). This field is ignored if the
 *  photoslibrary.readonly.appcreateddata scope is used.
 */
@property(nonatomic, assign) BOOL excludeNonAppCreatedData;

/**
 *  Maximum number of albums to return in the response. Fewer albums might be
 *  returned than the specified number. The default `pageSize` is 20, the
 *  maximum is 50.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A continuation token to get the next page of the results. Adding this to the
 *  request returns the rows after the `pageToken`. The `pageToken` should be
 *  the value returned in the `nextPageToken` parameter in the response to the
 *  `listAlbums` request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRPhotosLibrary_ListAlbumsResponse.
 *
 *  Lists all albums shown to a user in the Albums tab of the Google Photos app.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Update the album with the specified `id`. Only the `id`, `title` and
 *  `cover_photo_media_item_id` fields of the album are read. The album must
 *  have been created by the developer via the API and must be owned by the
 *  user.
 *
 *  Method: photoslibrary.albums.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibraryEditAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_AlbumsPatch : GTLRPhotosLibraryQuery

/**
 *  Identifier for the album. This is a persistent identifier that can be used
 *  between sessions to identify this album.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Required. Indicate what fields in the provided album to update. The only
 *  valid values are `title` and `cover_photo_media_item_id`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRPhotosLibrary_Album.
 *
 *  Update the album with the specified `id`. Only the `id`, `title` and
 *  `cover_photo_media_item_id` fields of the album are read. The album must
 *  have been created by the developer via the API and must be owned by the
 *  user.
 *
 *  @param object The @c GTLRPhotosLibrary_Album to include in the query.
 *  @param identifier Identifier for the album. This is a persistent identifier
 *    that can be used between sessions to identify this album.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsPatch
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_Album *)object
                     identifier:(NSString *)identifier;

@end

/**
 *  Marks an album as shared and accessible to other users. This action can only
 *  be performed on albums which were created by the developer via the API.
 *
 *  Method: photoslibrary.albums.share
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_AlbumsShare : GTLRPhotosLibraryQuery

/**
 *  Required. Identifier of the album to be shared. This `albumId` must belong
 *  to an album created by the developer.
 */
@property(nonatomic, copy, nullable) NSString *albumId;

/**
 *  Fetches a @c GTLRPhotosLibrary_ShareAlbumResponse.
 *
 *  Marks an album as shared and accessible to other users. This action can only
 *  be performed on albums which were created by the developer via the API.
 *
 *  @param object The @c GTLRPhotosLibrary_ShareAlbumRequest to include in the
 *    query.
 *  @param albumId Required. Identifier of the album to be shared. This
 *    `albumId` must belong to an album created by the developer.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsShare
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_ShareAlbumRequest *)object
                        albumId:(NSString *)albumId;

@end

/**
 *  Marks a previously shared album as private. This means that the album is no
 *  longer shared and all the non-owners will lose access to the album. All
 *  non-owner content will be removed from the album. If a non-owner has
 *  previously added the album to their library, they will retain all photos in
 *  their library. This action can only be performed on albums which were
 *  created by the developer via the API.
 *
 *  Method: photoslibrary.albums.unshare
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_AlbumsUnshare : GTLRPhotosLibraryQuery

/**
 *  Required. Identifier of the album to be unshared. This album id must belong
 *  to an album created by the developer.
 */
@property(nonatomic, copy, nullable) NSString *albumId;

/**
 *  Fetches a @c GTLRPhotosLibrary_UnshareAlbumResponse.
 *
 *  Marks a previously shared album as private. This means that the album is no
 *  longer shared and all the non-owners will lose access to the album. All
 *  non-owner content will be removed from the album. If a non-owner has
 *  previously added the album to their library, they will retain all photos in
 *  their library. This action can only be performed on albums which were
 *  created by the developer via the API.
 *
 *  @param object The @c GTLRPhotosLibrary_UnshareAlbumRequest to include in the
 *    query.
 *  @param albumId Required. Identifier of the album to be unshared. This album
 *    id must belong to an album created by the developer.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsUnshare
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_UnshareAlbumRequest *)object
                        albumId:(NSString *)albumId;

@end

/**
 *  Creates one or more media items in a user's Google Photos library. This is
 *  the second step for creating a media item. For details regarding Step 1,
 *  uploading the raw bytes to a Google Server, see Uploading media. This call
 *  adds the media item to the library. If an album `id` is specified, the call
 *  adds the media item to the album too. Each album can contain up to 20,000
 *  media items. By default, the media item will be added to the end of the
 *  library or album. If an album `id` and position are both defined, the media
 *  item is added to the album at the specified position. If the call contains
 *  multiple media items, they're added at the specified position. If you are
 *  creating a media item in a shared album where you are not the owner, you are
 *  not allowed to position the media item. Doing so will result in a `BAD
 *  REQUEST` error.
 *
 *  Method: photoslibrary.mediaItems.batchCreate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryAppendonly
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_MediaItemsBatchCreate : GTLRPhotosLibraryQuery

/**
 *  Fetches a @c GTLRPhotosLibrary_BatchCreateMediaItemsResponse.
 *
 *  Creates one or more media items in a user's Google Photos library. This is
 *  the second step for creating a media item. For details regarding Step 1,
 *  uploading the raw bytes to a Google Server, see Uploading media. This call
 *  adds the media item to the library. If an album `id` is specified, the call
 *  adds the media item to the album too. Each album can contain up to 20,000
 *  media items. By default, the media item will be added to the end of the
 *  library or album. If an album `id` and position are both defined, the media
 *  item is added to the album at the specified position. If the call contains
 *  multiple media items, they're added at the specified position. If you are
 *  creating a media item in a shared album where you are not the owner, you are
 *  not allowed to position the media item. Doing so will result in a `BAD
 *  REQUEST` error.
 *
 *  @param object The @c GTLRPhotosLibrary_BatchCreateMediaItemsRequest to
 *    include in the query.
 *
 *  @return GTLRPhotosLibraryQuery_MediaItemsBatchCreate
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_BatchCreateMediaItemsRequest *)object;

@end

/**
 *  Returns the list of media items for the specified media item identifiers.
 *  Items are returned in the same order as the supplied identifiers.
 *
 *  Method: photoslibrary.mediaItems.batchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_MediaItemsBatchGet : GTLRPhotosLibraryQuery

/**
 *  Required. Identifiers of the media items to be requested. Must not contain
 *  repeated identifiers and cannot be empty. The maximum number of media items
 *  that can be retrieved in one call is 50.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *mediaItemIds;

/**
 *  Fetches a @c GTLRPhotosLibrary_BatchGetMediaItemsResponse.
 *
 *  Returns the list of media items for the specified media item identifiers.
 *  Items are returned in the same order as the supplied identifiers.
 *
 *  @return GTLRPhotosLibraryQuery_MediaItemsBatchGet
 */
+ (instancetype)query;

@end

/**
 *  Returns the media item for the specified media item identifier.
 *
 *  Method: photoslibrary.mediaItems.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_MediaItemsGet : GTLRPhotosLibraryQuery

/** Required. Identifier of the media item to be requested. */
@property(nonatomic, copy, nullable) NSString *mediaItemId;

/**
 *  Fetches a @c GTLRPhotosLibrary_MediaItem.
 *
 *  Returns the media item for the specified media item identifier.
 *
 *  @param mediaItemId Required. Identifier of the media item to be requested.
 *
 *  @return GTLRPhotosLibraryQuery_MediaItemsGet
 */
+ (instancetype)queryWithMediaItemId:(NSString *)mediaItemId;

@end

/**
 *  List all media items from a user's Google Photos library.
 *
 *  Method: photoslibrary.mediaItems.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_MediaItemsList : GTLRPhotosLibraryQuery

/**
 *  Maximum number of media items to return in the response. Fewer media items
 *  might be returned than the specified number. The default `pageSize` is 25,
 *  the maximum is 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A continuation token to get the next page of the results. Adding this to the
 *  request returns the rows after the `pageToken`. The `pageToken` should be
 *  the value returned in the `nextPageToken` parameter in the response to the
 *  `listMediaItems` request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRPhotosLibrary_ListMediaItemsResponse.
 *
 *  List all media items from a user's Google Photos library.
 *
 *  @return GTLRPhotosLibraryQuery_MediaItemsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Update the media item with the specified `id`. Only the `id` and
 *  `description` fields of the media item are read. The media item must have
 *  been created by the developer via the API and must be owned by the user.
 *
 *  Method: photoslibrary.mediaItems.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibraryEditAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_MediaItemsPatch : GTLRPhotosLibraryQuery

/**
 *  Identifier for the media item. This is a persistent identifier that can be
 *  used between sessions to identify this media item.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Required. Indicate what fields in the provided media item to update. The
 *  only valid value is `description`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRPhotosLibrary_MediaItem.
 *
 *  Update the media item with the specified `id`. Only the `id` and
 *  `description` fields of the media item are read. The media item must have
 *  been created by the developer via the API and must be owned by the user.
 *
 *  @param object The @c GTLRPhotosLibrary_MediaItem to include in the query.
 *  @param identifier Identifier for the media item. This is a persistent
 *    identifier that can be used between sessions to identify this media item.
 *
 *  @return GTLRPhotosLibraryQuery_MediaItemsPatch
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_MediaItem *)object
                     identifier:(NSString *)identifier;

@end

/**
 *  Searches for media items in a user's Google Photos library. If no filters
 *  are set, then all media items in the user's library are returned. If an
 *  album is set, all media items in the specified album are returned. If
 *  filters are specified, media items that match the filters from the user's
 *  library are listed. If you set both the album and the filters, the request
 *  results in an error.
 *
 *  Method: photoslibrary.mediaItems.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_MediaItemsSearch : GTLRPhotosLibraryQuery

/**
 *  Fetches a @c GTLRPhotosLibrary_SearchMediaItemsResponse.
 *
 *  Searches for media items in a user's Google Photos library. If no filters
 *  are set, then all media items in the user's library are returned. If an
 *  album is set, all media items in the specified album are returned. If
 *  filters are specified, media items that match the filters from the user's
 *  library are listed. If you set both the album and the filters, the request
 *  results in an error.
 *
 *  @param object The @c GTLRPhotosLibrary_SearchMediaItemsRequest to include in
 *    the query.
 *
 *  @return GTLRPhotosLibraryQuery_MediaItemsSearch
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_SearchMediaItemsRequest *)object;

@end

/**
 *  Returns the album based on the specified `shareToken`.
 *
 *  Method: photoslibrary.sharedAlbums.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_SharedAlbumsGet : GTLRPhotosLibraryQuery

/** Required. Share token of the album to be requested. */
@property(nonatomic, copy, nullable) NSString *shareToken;

/**
 *  Fetches a @c GTLRPhotosLibrary_Album.
 *
 *  Returns the album based on the specified `shareToken`.
 *
 *  @param shareToken Required. Share token of the album to be requested.
 *
 *  @return GTLRPhotosLibraryQuery_SharedAlbumsGet
 */
+ (instancetype)queryWithShareToken:(NSString *)shareToken;

@end

/**
 *  Joins a shared album on behalf of the Google Photos user.
 *
 *  Method: photoslibrary.sharedAlbums.join
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_SharedAlbumsJoin : GTLRPhotosLibraryQuery

/**
 *  Fetches a @c GTLRPhotosLibrary_JoinSharedAlbumResponse.
 *
 *  Joins a shared album on behalf of the Google Photos user.
 *
 *  @param object The @c GTLRPhotosLibrary_JoinSharedAlbumRequest to include in
 *    the query.
 *
 *  @return GTLRPhotosLibraryQuery_SharedAlbumsJoin
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_JoinSharedAlbumRequest *)object;

@end

/**
 *  Leaves a previously-joined shared album on behalf of the Google Photos user.
 *  The user must not own this album.
 *
 *  Method: photoslibrary.sharedAlbums.leave
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_SharedAlbumsLeave : GTLRPhotosLibraryQuery

/**
 *  Fetches a @c GTLRPhotosLibrary_LeaveSharedAlbumResponse.
 *
 *  Leaves a previously-joined shared album on behalf of the Google Photos user.
 *  The user must not own this album.
 *
 *  @param object The @c GTLRPhotosLibrary_LeaveSharedAlbumRequest to include in
 *    the query.
 *
 *  @return GTLRPhotosLibraryQuery_SharedAlbumsLeave
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_LeaveSharedAlbumRequest *)object;

@end

/**
 *  Lists all shared albums available in the Sharing tab of the user's Google
 *  Photos app.
 *
 *  Method: photoslibrary.sharedAlbums.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_SharedAlbumsList : GTLRPhotosLibraryQuery

/**
 *  If set, the results exclude media items that were not created by this app.
 *  Defaults to false (all albums are returned). This field is ignored if the
 *  photoslibrary.readonly.appcreateddata scope is used.
 */
@property(nonatomic, assign) BOOL excludeNonAppCreatedData;

/**
 *  Maximum number of albums to return in the response. Fewer albums might be
 *  returned than the specified number. The default `pageSize` is 20, the
 *  maximum is 50.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A continuation token to get the next page of the results. Adding this to the
 *  request returns the rows after the `pageToken`. The `pageToken` should be
 *  the value returned in the `nextPageToken` parameter in the response to the
 *  `listSharedAlbums` request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRPhotosLibrary_ListSharedAlbumsResponse.
 *
 *  Lists all shared albums available in the Sharing tab of the user's Google
 *  Photos app.
 *
 *  @return GTLRPhotosLibraryQuery_SharedAlbumsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
